local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

-- Tween configuration
local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local pulseInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)

-- Function to tween highlight colors
local function tweenHighlightColors(highlight, targetFillColor, targetOutlineColor)
    if not highlight then return end
    local tween = TweenService:Create(highlight, tweenInfo, {
        FillColor = targetFillColor,
        OutlineColor = targetOutlineColor,
    })
    tween:Play()
end

-- Function to create a pulsating effect for enemies
local function createPulseEffect(highlight, baseColor)
    if not highlight then return end
    local pulseTween = TweenService:Create(highlight, pulseInfo, {
        FillColor = baseColor:Lerp(Color3.new(1, 1, 1), 0.3),
    })
    pulseTween:Play()
end

-- Function to check if a player is a bot
local function isBot(player)
    return player:GetAttribute("IsBot") == true or string.find(player.Name, "Bot") ~= nil
end

-- Function to get highlight colors based on team and status
local function getTargetColors(player)
    if isBot(player) then
        return Color3.fromRGB(255, 165, 0), Color3.fromRGB(255, 140, 0)
    elseif player.Team == localPlayer.Team then
        return Color3.fromRGB(0, 150, 255), Color3.fromRGB(0, 120, 255)
    else
        return Color3.fromRGB(255, 0, 0), Color3.fromRGB(200, 0, 0)
    end
end

-- Function to apply or update the highlight
local function applyHighlight(character)
    if not character then return end
    local highlight = character:FindFirstChild("Highlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.Parent = character
        highlight.FillColor = Color3.new(0, 0, 0)
        highlight.OutlineColor = Color3.new(0, 0, 0)
    end
    
    local player = Players:GetPlayerFromCharacter(character)
    if player then
        local targetFill, targetOutline = getTargetColors(player)
        tweenHighlightColors(highlight, targetFill, targetOutline)
        
        if player.Team ~= localPlayer.Team and not isBot(player) then
            createPulseEffect(highlight, targetFill)
        end
    end
end

-- Function to handle character spawn
local function onCharacterAdded(character)
    character:WaitForChild("Humanoid", 5)
    applyHighlight(character)
end

-- Function to handle new players
local function onPlayerAdded(player)
    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

-- Apply to existing players
for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

-- Listen for new players
Players.PlayerAdded:Connect(onPlayerAdded)

-- Cleanup when players leave
Players.PlayerRemoving:Connect(function(player)
    if player.Character then
        local highlight = player.Character:FindFirstChild("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local ESP_Lines = {} -- Store ESP lines

-- Function to create an ESP line for an enemy
local function CreateESPLine(player)
    if not player or player == LocalPlayer or player.Team == LocalPlayer.Team then return end

    local line = Drawing.new("Line")
    line.Thickness = 1.5
    line.Transparency = 1
    line.Color = Color3.fromRGB(255, 0, 0) -- **Red for enemy ESP**
    line.Visible = false

    ESP_Lines[player] = line

    RunService.RenderStepped:Connect(function()
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

            -- Get camera direction
            local cameraDirection = Camera.CFrame.LookVector
            local targetDirection = (rootPart.Position - Camera.CFrame.Position).unit

            -- Check if the player is looking at the enemy (ignores looking down or straight)
            local dotProduct = cameraDirection:Dot(targetDirection)
            if onScreen and dotProduct > 0.5 then -- **Adjust 0.5 for sensitivity**
                line.Visible = true
                line.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
            else
                line.Visible = false
            end
        else
            line.Visible = false
        end
    end)
end

-- Function to remove ESP when an enemy leaves
local function RemoveESPLine(player)
    if ESP_Lines[player] then
        ESP_Lines[player]:Remove()
        ESP_Lines[player] = nil
    end
end

-- Apply ESP to all current enemies
for _, player in pairs(Players:GetPlayers()) do
    CreateESPLine(player)
end

-- Detect new enemies joining
Players.PlayerAdded:Connect(function(player)
    CreateESPLine(player)
end)

-- Detect enemies leaving and remove ESP
Players.PlayerRemoving:Connect(function(player)
    RemoveESPLine(player)
end)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local PhysicsService = game:GetService("PhysicsService")

-- 🛠️ Reduce Unnecessary Physics Calculations
PhysicsService:SetPartCollisionGroup(workspace, "Default")
settings().PhysicsThrottle = Enum.PhysicsThrottle.Adaptive
game:GetService("Workspace").RejectCharacterDeletions = true

-- 🚀 Optimize Graphics & Lighting
Lighting.GlobalShadows = false
Lighting.FogEnd = 100000
Lighting.Brightness = 1

-- 🎭 Disable Unused Player Features
Players.CharacterAutoLoads = false

-- 🔄 Garbage Collection for Performance
local function CleanMemory()
    collectgarbage("collect")
end

RunService.Heartbeat:Connect(function()
    CleanMemory()
end)

-- 🕵️‍♂️ Auto Remove Unused Parts & Models
for _, v in pairs(workspace:GetChildren()) do
    if v:IsA("Part") or v:IsA("MeshPart") then
        v:SetAttribute("CanTouch", false)
        v:SetAttribute("CanCollide", false)
    end
end

-- 🎮 Disable Unused Scripts (If Not Needed)
for _, script in pairs(game:GetDescendants()) do
    if script:IsA("Script") or script:IsA("LocalScript") then
        script.Disabled = true
    end
end

-- 💨 Disable Heavy Effects
for _, v in pairs(workspace:GetDescendants()) do
    if v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Enabled = false
    end
end

print("✅ Performance Optimization Applied!")

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- 🎯 AIMBOT SETTINGS 🎯 --
local AIM_SPEED = 0.1 -- Smoothness (Lower = Slower, Higher = Faster)
local AIM_RANDOMNESS = 3 -- Small inaccuracy for realism
local REACTION_TIME = 0.05 -- Delay before locking onto an enemy
local HEADSHOT_DAMAGE = 50 -- Base headshot damage
local BODYSHOT_DAMAGE = 25 -- Base bodyshot damage
local DAMAGE_MULTIPLIER_DISTANCE = 0.1 -- More damage at long range
local TRACK_MOVEMENT = true -- Predicts enemy movement
local AUTO_HIT_CORRECTION = true -- Fixes missed shots to hit
local WALLBANG_ENABLED = false -- 🔥 Set to true to shoot enemies through walls
local WALLBANG_DAMAGE_REDUCTION = 0.5 -- Reduce damage through walls by 50%

-- Function to check if a player is an enemy
local function isEnemy(player)
    return player and player.Team ~= LocalPlayer.Team
end

-- Function to check if an enemy is visible or behind a wall
local function isTargetValid(target)
    if not target or not target.Parent then return false end
    local origin = Camera.CFrame.Position
    local direction = (target.Position - origin).unit * (target.Position - origin).magnitude
    local raycastResult = workspace:Raycast(origin, direction, {LocalPlayer.Character, target.Parent}) -- Ignore local player & enemy

    if raycastResult then
        -- If wall penetration is enabled, allow shooting through walls
        return WALLBANG_ENABLED
    else
        return true -- Target is visible
    end
end

-- Function to predict enemy movement
local function predictPosition(target)
    if not target or not TRACK_MOVEMENT then return target.Position end
    local humanoid = target.Parent:FindFirstChildOfClass("Humanoid")
    if humanoid and humanoid.MoveDirection.Magnitude > 0 then
        return target.Position + humanoid.MoveDirection * 0.2 -- Adjust prediction speed
    end
    return target.Position
end

-- Function to find the closest enemy (visible or behind a wall if enabled)
local function findClosestEnemy()
    local closestTarget = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isEnemy(player) and player.Character then
            local head = player.Character:FindFirstChild("Head")
            if head and isTargetValid(head) then
                local predictedPos = predictPosition(head)
                local screenPos, onScreen = Camera:WorldToScreenPoint(predictedPos)
                if onScreen then
                    local distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestTarget = head
                    end
                end
            end
        end
    end
    return closestTarget
end

-- Function to smoothly aim toward the target
local function smoothAim(targetHead)
    if targetHead then
        local predictedPos = predictPosition(targetHead)
        local screenPos, onScreen = Camera:WorldToScreenPoint(predictedPos)
        if onScreen then
            local targetX = screenPos.X + math.random(-AIM_RANDOMNESS, AIM_RANDOMNESS)
            local targetY = screenPos.Y + math.random(-AIM_RANDOMNESS, AIM_RANDOMNESS)

            -- Smooth interpolation toward target
            Mouse.X = Mouse.X + (targetX - Mouse.X) * AIM_SPEED
            Mouse.Y = Mouse.Y + (targetY - Mouse.Y) * AIM_SPEED
        end
    end
end

-- Function to calculate damage based on distance and wall penetration
local function calculateDamage(target)
    local distance = (Camera.CFrame.Position - target.Position).Magnitude
    local extraDamage = distance * DAMAGE_MULTIPLIER_DISTANCE
    local baseDamage = HEADSHOT_DAMAGE

    -- If wall penetration is enabled and the shot goes through a wall, reduce damage
    if WALLBANG_ENABLED and not isTargetValid(target) then
        return (baseDamage + extraDamage) * WALLBANG_DAMAGE_REDUCTION
    else
        return baseDamage + extraDamage
    end
end

-- Function to correct missed shots and ensure hits
local function correctMiss(target)
    if AUTO_HIT_CORRECTION and target then
        local humanoid = target.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local damage = calculateDamage(target)
            humanoid:TakeDamage(damage) -- Apply damage correction
        end
    end
end

-- Function to shoot when an enemy is visible or behind a wall
local function onShoot()
    local target = findClosestEnemy()
    if target then
        task.wait(REACTION_TIME) -- Simulated reaction delay
        smoothAim(target) -- Gradually move crosshair
        task.wait(0.1) -- Small delay for realism

        -- Simulate headshot damage
        local humanoid = target.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local damage = calculateDamage(target)
            humanoid:TakeDamage(damage) -- Apply calculated damage
        end
    else
        -- If shot misses, auto-correct to still hit
        if AUTO_HIT_CORRECTION then
            local randomEnemy = findClosestEnemy()
            if randomEnemy then correctMiss(randomEnemy) end
        end
    end
end

-- Detect PC Shooting (Mouse Click)
Mouse.Button1Down:Connect(onShoot)

-- Detect Mobile Shooting (Touch Tap)
UserInputService.TouchTap:Connect(function(_, processed)
    if not processed then
        onShoot()
    end
end)

-- Ultra-Smooth Aimbot Loop (Only Reacts When Enemy is Visible or Behind a Wall)
RunService.RenderStepped:Connect(function()
    local target = findClosestEnemy()
    if target then
        smoothAim(target)
    end
end)
