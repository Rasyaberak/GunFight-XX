local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

-- Tween configurations
local tweenInfo = TweenInfo.new(0.35, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local fadeOutInfo = TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local pulseInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)

-- Function to smoothly transition highlight colors
local function tweenHighlightColors(highlight, targetFillColor, targetOutlineColor, outlineThickness, transparency)
    if highlight then
        TweenService:Create(highlight, tweenInfo, {
            FillColor = targetFillColor,
            OutlineColor = targetOutlineColor,
            OutlineTransparency = transparency,
            DepthMode = Enum.HighlightDepthMode.Occluded, -- Ensures ESP visibility through walls
            OutlineThickness = outlineThickness
        }):Play()
    end
end

-- Function to create an adaptive pulsing effect for enemies
local function createPulseEffect(highlight, baseColor, isClose)
    if highlight then
        local pulseSpeed = isClose and 0.8 or 1.2 -- Faster pulse when close
        local adjustedPulseInfo = TweenInfo.new(pulseSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
        TweenService:Create(highlight, adjustedPulseInfo, {
            FillColor = baseColor:Lerp(Color3.new(1, 1, 1), 0.4),
        }):Play()
    end
end

-- Function to create a smooth fade-out effect for removed players
local function fadeOutHighlight(highlight)
    if highlight then
        TweenService:Create(highlight, fadeOutInfo, {
            FillTransparency = 1,
            OutlineTransparency = 1
        }):Play()
        task.wait(0.6)
        highlight:Destroy()
    end
end

-- Function to check if a player is a bot
local function isBot(player)
    return player:GetAttribute("IsBot") == true or string.find(player.Name, "Bot") ~= nil
end

-- Function to get highlight settings based on player status
local function getTargetColors(player)
    if isBot(player) then
        return Color3.fromRGB(255, 165, 0), Color3.fromRGB(255, 140, 0), 0.4, 1  -- Orange for bots
    elseif player.Team == localPlayer.Team then
        return Color3.fromRGB(0, 200, 255), Color3.fromRGB(0, 160, 255), 0.5, 0.6  -- Blue for teammates
    else
        return Color3.fromRGB(255, 50, 50), Color3.fromRGB(180, 20, 20), 1.2, 0  -- Red for enemies (thicker outline)
    end
end

-- Function to check if an enemy is close to the player
local function isCloseToLocalPlayer(character)
    if not character or not localPlayer.Character then return false end
    local enemyRoot = character:FindFirstChild("HumanoidRootPart")
    local localRoot = localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if enemyRoot and localRoot then
        local distance = (localRoot.Position - enemyRoot.Position).Magnitude
        return distance < 20 -- Consider "close" if within 20 studs
    end
    return false
end

-- Function to apply or update highlights on characters
local function applyHighlight(character)
    if not character then return end
    
    local highlight = character:FindFirstChild("Highlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.Parent = character
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0
    end

    local player = Players:GetPlayerFromCharacter(character)
    if player then
        local targetFill, targetOutline, outlineThickness, transparency = getTargetColors(player)
        tweenHighlightColors(highlight, targetFill, targetOutline, outlineThickness, transparency)

        -- Apply pulsing effect for enemies
        if player.Team ~= localPlayer.Team and not isBot(player) then
            local isClose = isCloseToLocalPlayer(character)
            createPulseEffect(highlight, targetFill, isClose)
        end
    end
end

-- Function to handle character spawn
local function onCharacterAdded(character)
    character:WaitForChild("Humanoid", 5)
    applyHighlight(character)
end

-- Function to handle new players
local function onPlayerAdded(player)
    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

-- Apply to existing players
for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

-- Listen for new players
Players.PlayerAdded:Connect(onPlayerAdded)

-- Cleanup when players leave (smooth fade-out)
Players.PlayerRemoving:Connect(function(player)
    if player.Character then
        local highlight = player.Character:FindFirstChild("Highlight")
        if highlight then
            fadeOutHighlight(highlight)
        end
    end
end)


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local ESP_Lines = {} -- Store ESP lines

-- Function to create an ESP line for an enemy
local function CreateESPLine(player)
    if not player or player == LocalPlayer or player.Team == LocalPlayer.Team then return end

    local line = Drawing.new("Line")
    line.Thickness = 1.5
    line.Transparency = 1
    line.Color = Color3.fromRGB(255, 0, 0) -- **Red for enemy ESP**
    line.Visible = false

    ESP_Lines[player] = line

    RunService.RenderStepped:Connect(function()
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

            -- Get camera direction
            local cameraDirection = Camera.CFrame.LookVector
            local targetDirection = (rootPart.Position - Camera.CFrame.Position).unit

            -- Check if the player is looking at the enemy (ignores looking down or straight)
            local dotProduct = cameraDirection:Dot(targetDirection)
            if onScreen and dotProduct > 0.5 then -- **Adjust 0.5 for sensitivity**
                line.Visible = true
                line.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
            else
                line.Visible = false
            end
        else
            line.Visible = false
        end
    end)
end

-- Function to remove ESP when an enemy leaves
local function RemoveESPLine(player)
    if ESP_Lines[player] then
        ESP_Lines[player]:Remove()
        ESP_Lines[player] = nil
    end
end

-- Apply ESP to all current enemies
for _, player in pairs(Players:GetPlayers()) do
    CreateESPLine(player)
end

-- Detect new enemies joining
Players.PlayerAdded:Connect(function(player)
    CreateESPLine(player)
end)

-- Detect enemies leaving and remove ESP
Players.PlayerRemoving:Connect(function(player)
    RemoveESPLine(player)
end)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local PhysicsService = game:GetService("PhysicsService")
local CollectionService = game:GetService("CollectionService")

-- ‚öôÔ∏è Optimize Physics Settings
PhysicsService:SetPartCollisionGroup(workspace, "Default")
settings().PhysicsThrottle = Enum.PhysicsThrottle.Adaptive
workspace.RejectCharacterDeletions = true
workspace.StreamingEnabled = true  -- Loads parts dynamically to reduce lag

-- üí° Optimize Lighting (Good FPS Without Losing Quality)
Lighting.GlobalShadows = true   -- Keep some shadows for realism
Lighting.Brightness = 2         -- Normal brightness
Lighting.FogEnd = 80000         -- Reasonable fog distance for better FPS
Lighting.Outlines = false       -- Reduces rendering load

-- üé≠ Reduce Unnecessary Player Features
Players.CharacterAutoLoads = true
for _, player in pairs(Players:GetPlayers()) do
    player.CameraMode = Enum.CameraMode.Classic
    player.ReplicationFocus = workspace -- Optimizes network performance
end

-- üõ†Ô∏è Auto Garbage Collection (Prevents Memory Overload)
local function CleanMemory()
    collectgarbage("collect")
end
RunService.Heartbeat:Connect(function()
    CleanMemory()
end)

-- üîÑ Reduce Overload from Parts & Effects
for _, v in pairs(workspace:GetDescendants()) do
    if v:IsA("ParticleEmitter") then
        v.Rate = math.max(v.Rate * 0.4, 5) -- Reduce particles by 60% but keep them visible
        v.Lifetime = NumberRange.new(v.Lifetime.Min * 0.5, v.Lifetime.Max * 0.5) -- Shorter lifetime
    elseif v:IsA("Trail") then
        v.Lifetime = math.min(v.Lifetime * 0.5, 0.5) -- Shorten trails
        v.Enabled = false -- Disable unnecessary trails
    elseif v:IsA("MeshPart") or v:IsA("Part") then
        v.CanCollide = false -- Reduce physics load
        v.Anchored = true -- Prevents unnecessary physics calculations
    end
end

-- üöÄ Auto Remove Unused & Hidden Parts (Prevents FPS Drops)
for _, v in pairs(workspace:GetChildren()) do
    if v:IsA("Model") and #v:GetChildren() == 0 then
        v:Destroy()
    end
end

-- üîÑ Disable Unused Scripts (But Keep Essential Ones)
for _, script in pairs(game:GetDescendants()) do
    if script:IsA("Script") or script:IsA("LocalScript") then
        if not CollectionService:HasTag(script, "Essential") then
            script.Disabled = true
        end
    end
end

-- üéÆ Improve Network Performance (Reduce Lag from Many Players)
game:GetService("NetworkSettings").IncomingReplicationLag = 0
game:GetService("NetworkSettings").PhysicsSendRate = 60 -- Higher rate reduces lag
game:GetService("NetworkSettings").RenderStreamedRegions = true -- Loads only visible areas

print("‚úÖ Advanced Optimization Applied! Smooth FPS with good quality.")

------------------------------
-- üñ•Ô∏è FPS GUI (With Lag Detection)
------------------------------
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local FPSBox = Instance.new("Frame")
FPSBox.Size = UDim2.new(0, 150, 0, 60)
FPSBox.Position = UDim2.new(1, -160, 0, 10) -- Top-right corner
FPSBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
FPSBox.BackgroundTransparency = 0.4
FPSBox.Parent = ScreenGui

local FPSText = Instance.new("TextLabel")
FPSText.Size = UDim2.new(1, 0, 0.5, 0)
FPSText.Position = UDim2.new(0, 0, 0, 0)
FPSText.TextColor3 = Color3.fromRGB(255, 255, 255)
FPSText.TextScaled = true
FPSText.BackgroundTransparency = 1
FPSText.Parent = FPSBox

local DropReasonText = Instance.new("TextLabel")
DropReasonText.Size = UDim2.new(1, 0, 0.5, 0)
DropReasonText.Position = UDim2.new(0, 0, 0.5, 0)
DropReasonText.TextColor3 = Color3.fromRGB(255, 100, 100)
DropReasonText.TextScaled = true
DropReasonText.BackgroundTransparency = 1
DropReasonText.Parent = FPSBox

-- FPS Tracker Variables
local fps = 60
local lastUpdate = tick()
local frameCount = 0

-- Detect FPS Drops and Display Reason
RunService.RenderStepped:Connect(function()
    frameCount = frameCount + 1
    local currentTime = tick()

    if currentTime - lastUpdate >= 1 then
        fps = frameCount
        frameCount = 0
        lastUpdate = currentTime

        FPSText.Text = "FPS: " .. fps

        -- Detect FPS drop and show reason
        if fps < 30 then
            DropReasonText.Text = "‚ö†Ô∏è High Lag (Too Many Parts)"
        elseif fps < 50 then
            DropReasonText.Text = "‚ö†Ô∏è Scripts Overload"
        else
            DropReasonText.Text = "" -- No warning if FPS is stable
        end
    end
end)

print("‚úÖ FPS GUI Loaded")

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- üéØ AIMBOT SETTINGS üéØ --
local AIM_SPEED = 0.15 -- Smooth tracking speed (lower = faster lock)
local AIM_RANDOMNESS = 0 -- No randomness, perfect aim
local REACTION_TIME = 0.02 -- Delay before locking onto enemy
local HEADSHOT_DAMAGE = 100 -- One-shot kill on headshots
local BODYSHOT_DAMAGE = 50 -- Balanced bodyshot damage
local DAMAGE_MULTIPLIER_DISTANCE = 0.2 -- More damage at long range
local TRACK_MOVEMENT = true -- Predicts enemy movement
local AUTO_HIT_CORRECTION = true -- Bullets always hit
local BULLET_SPEED = math.huge -- Instant bullet hits
local TRIGGER_BOT = true -- Auto-shoot when enemy in crosshair
local FOV_LIMIT = 200 -- Aimbot only locks onto enemies within this range
local HEALTH_BASED_TARGETING = true -- Targets low-health enemies first
local WALLBANG_ENABLED = true -- üî• Shoot enemies through thin walls
local MAX_WALL_THICKNESS = 5 -- Maximum thickness for wall penetration
local WALLBANG_DAMAGE_REDUCTION = 0.4 -- 40% less damage through walls
local AUTO_LOCK = true -- üî• Smoothly locks onto enemy

-- Function to check if a player is an enemy
local function isEnemy(player)
    return player and player.Team ~= LocalPlayer.Team
end

-- Function to check if an enemy is visible (or behind a thin wall)
local function isTargetVisible(target)
    if not target or not target.Parent then return false end
    local origin = Camera.CFrame.Position
    local direction = (target.Position - origin).unit * (target.Position - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(origin, direction, raycastParams)

    if raycastResult then
        local wallThickness = (raycastResult.Position - origin).Magnitude
        if WALLBANG_ENABLED and wallThickness <= MAX_WALL_THICKNESS then
            return true -- Shoot through thin walls
        else
            return false -- Block shot if wall is too thick
        end
    else
        return true -- No obstruction, can shoot normally
    end
end

-- Function to predict enemy movement
local function predictPosition(target)
    if not target or not TRACK_MOVEMENT then return target.Position end
    local humanoid = target.Parent:FindFirstChildOfClass("Humanoid")
    if humanoid and humanoid.MoveDirection.Magnitude > 0 then
        return target.Position + humanoid.MoveDirection * 0.3 -- Predict ahead
    end
    return target.Position
end

-- Function to check if the enemy is inside FOV range
local function isInFOV(target)
    local screenPos, onScreen = Camera:WorldToScreenPoint(target.Position)
    if onScreen then
        local distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
        return distance <= FOV_LIMIT
    end
    return false
end

-- Function to find the best enemy target
local function findBestTarget()
    local bestTarget = nil
    local lowestHealth = math.huge
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isEnemy(player) and player.Character then
            local head = player.Character:FindFirstChild("Head")
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")

            if head and humanoid and isTargetVisible(head) and isInFOV(head) then
                local predictedPos = predictPosition(head)
                local screenPos, onScreen = Camera:WorldToScreenPoint(predictedPos)
                if onScreen then
                    local distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    
                    if HEALTH_BASED_TARGETING and humanoid.Health < lowestHealth then
                        lowestHealth = humanoid.Health
                        bestTarget = head
                    elseif distance < shortestDistance then
                        shortestDistance = distance
                        bestTarget = head
                    end
                end
            end
        end
    end
    return bestTarget
end

-- Function to smoothly lock onto the target
local function smoothAutoLock(target)
    if target then
        local predictedPos = predictPosition(target)
        local screenPos, onScreen = Camera:WorldToScreenPoint(predictedPos)
        if onScreen then
            local targetX = screenPos.X + math.random(-AIM_RANDOMNESS, AIM_RANDOMNESS)
            local targetY = screenPos.Y + math.random(-AIM_RANDOMNESS, AIM_RANDOMNESS)

            -- Smooth interpolation toward target
            Mouse.X = Mouse.X + (targetX - Mouse.X) * AIM_SPEED
            Mouse.Y = Mouse.Y + (targetY - Mouse.Y) * AIM_SPEED
        end
    end
end

-- Function to calculate damage
local function calculateDamage(target)
    local distance = (Camera.CFrame.Position - target.Position).Magnitude
    local extraDamage = distance * DAMAGE_MULTIPLIER_DISTANCE
    local baseDamage = HEADSHOT_DAMAGE

    if WALLBANG_ENABLED and not isTargetVisible(target) then
        return (baseDamage + extraDamage) * WALLBANG_DAMAGE_REDUCTION
    else
        return baseDamage + extraDamage
    end
end

-- Function to ensure missed shots still hit
local function correctMiss(target)
    if AUTO_HIT_CORRECTION and target then
        local humanoid = target.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local damage = calculateDamage(target)
            humanoid:TakeDamage(damage) -- Apply damage correction
        end
    end
end

-- Function to shoot at the enemy
local function onShoot()
    local target = findBestTarget()
    if target then
        task.wait(REACTION_TIME) -- Simulated reaction delay
        smoothAutoLock(target) -- Smooth lock-on
        task.wait(0.05) -- Small delay for realism

        local humanoid = target.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local damage = calculateDamage(target)
            humanoid:TakeDamage(damage) -- Apply calculated damage
        end
    else
        -- If shot misses, auto-correct to still hit
        if AUTO_HIT_CORRECTION then
            local randomEnemy = findBestTarget()
            if randomEnemy then correctMiss(randomEnemy) end
        end
    end
end

-- Detect PC Shooting (Mouse Click)
Mouse.Button1Down:Connect(onShoot)

-- Detect Mobile Shooting (Touch Tap)
UserInputService.TouchTap:Connect(function(_, processed)
    if not processed then
        onShoot()
    end
end)

-- Ultra-Smooth Aimbot Loop (Only Reacts When Enemy is Visible)
RunService.RenderStepped:Connect(function()
    local target = findBestTarget()
    if target then
        if AUTO_LOCK then
            smoothAutoLock(target) -- üî• Smooth Auto-Lock
        end
        if TRIGGER_BOT then
            onShoot() -- Auto-fire when enemy is in crosshair
        end
    end
end)
